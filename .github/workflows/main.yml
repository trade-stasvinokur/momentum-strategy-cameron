name: CI

on:
  schedule:
    - cron: '0 21 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Get path
        run: echo ${GITHUB_WORKSPACE}

      - name: Update OS without interactive prompts
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update -y
          sudo apt-get upgrade -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"
          sudo apt-get dist-upgrade -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"
          sudo apt autoremove -y

      - name: Install docker
        run: |
          if [[ $(which docker) && $(docker --version) ]]; then true; 
          else
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo systemctl enable docker
            sudo systemctl start docker
          fi;

      - name: Create .env for all services
        env:
          TINKOFF_INVEST_TOKEN: ${{ secrets.TINKOFF_INVEST_TOKEN }}
        run: |
          mkdir -p "${GITHUB_WORKSPACE}/src/gap_scanner"
          printf 'TINKOFF_INVEST_TOKEN=%s\nLOG_LEVEL=INFO\n' \
                "$TINKOFF_INVEST_TOKEN" \
              > "${GITHUB_WORKSPACE}/src/gap_scanner/.env"
          chmod 600 "${GITHUB_WORKSPACE}/src/gap_scanner/.env"

          mkdir -p "${GITHUB_WORKSPACE}/src/strategies"
          printf 'TINKOFF_INVEST_TOKEN=%s\nLOG_LEVEL=INFO\n' \
                "$TINKOFF_INVEST_TOKEN" \
              > "${GITHUB_WORKSPACE}/src/strategies/.env"
          chmod 600 "${GITHUB_WORKSPACE}/src/strategies/.env"

          mkdir -p "${GITHUB_WORKSPACE}/src/vwap_levels"
          printf 'TINKOFF_INVEST_TOKEN=%s\nLOG_LEVEL=INFO\n' \
                "$TINKOFF_INVEST_TOKEN" \
              > "${GITHUB_WORKSPACE}/src/vwap_levels/.env"
          chmod 600 "${GITHUB_WORKSPACE}/src/vwap_levels/.env"

          mkdir -p "${GITHUB_WORKSPACE}/src/orchestrator"
          printf 'TINKOFF_INVEST_TOKEN=%s\nLOG_LEVEL=INFO\n' \
                "$TINKOFF_INVEST_TOKEN" \
              > "${GITHUB_WORKSPACE}/src/orchestrator/.env"
          chmod 600 "${GITHUB_WORKSPACE}/src/orchestrator/.env"

      - name: Build stack and wait for “Scheduler started”
        run: |
          set -e
          cd "${GITHUB_WORKSPACE}"

          # 1. Сборка и запуск сервисов
          docker compose -f docker-compose.yml up -d --build

          # 2. Открываем сгруппированный вывод логов
          echo "::group::docker compose live logs"
          # timeout прекращает поток через 900 с, если условия не выполнились
          if timeout 900 bash -c '
            # Вытягиваем только orchestrator-контейнер (быстрее и чище)
            docker compose logs -f --no-color orchestrator |
            while IFS= read -r line; do
              printf "%s\n" "$line"             # печатаем в вывод Actions
              [[ "$line" == *"Scheduler started"* ]] && exit 0   # нашли — выходим
            done
          '; then
            echo "✅ Scheduler detected — продолжаем workflow"
          else
            echo "::endgroup::"
            echo "::error::Scheduler line not found within 15 minutes"
            exit 1
          fi
          echo "::endgroup::"

      - name: Fail if report is missing
        run: test -f reports/strategy_results.csv

      - name: Commit strategy_results.csv
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: |
            chore(ci): update strategy_results.csv
          file_pattern: reports/strategy_results.csv

      - name: Docker image prune final
        run: |
          docker system prune -af
          sudo rm -rf /var/log/*
