services:
  gap_scanner:
    build: ./src/gap_scanner
    ports:
      - "8000:8000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
  vwap_levels:
    build: ./src/vwap_levels
    ports:
      - "8001:8001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/docs"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
  gap_and_go:
    build:
      context: ./src/strategies
      dockerfile: DockerfileGapAndGo
    ports:
      - "8002:8002"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/docs"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
  flat_breakout:
    build:
      context: ./src/strategies
      dockerfile: DockerfileFlatBreakout
    ports:
      - "8003:8003"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/docs"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
  bull_flag:
    build:
      context: ./src/strategies
      dockerfile: DockerfileBullFlag
    ports:
      - "8004:8004"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/docs"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
  first_pullback:
    build:
      context: ./src/strategies
      dockerfile: DockerfileFirstPullback
    ports:
      - "8005:8005"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/docs"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
  abcd:
    build:
      context: ./src/strategies
      dockerfile: DockerfileABCD
    ports:
      - "8006:8006"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/docs"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
  orchestrator:
    build: ./src/orchestrator
    environment:
      - TZ=Europe/Moscow
    depends_on:
      gap_scanner:
        condition: service_healthy
      vwap_levels:
        condition: service_healthy
      gap_and_go:
        condition: service_healthy
      flat_breakout:
        condition: service_healthy
      bull_flag:
        condition: service_healthy
      first_pullback:
        condition: service_healthy
      abcd:
        condition: service_healthy

    restart: unless-stopped
